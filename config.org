* Basic things
** Tidier UI
#+begin_src emacs-lisp
(setq inhibit-splash-screen t)

(tool-bar-mode 0)
(scroll-bar-mode 0)
(display-battery-mode 0)
#+end_src
** Shorter prompt
#+begin_src emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+end_src
** Scrolling behaviour
Avoids jumping half-a-screen when cursor reaches buttom of screen

#+begin_src emacs-lisp
(setq scroll-conservatively 10000)
#+end_src
** Default tab settings
Don't indent with tabs, and make tab-width 4 just-in-case (mainly for untabify)

#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
(setq tab-width 4)
#+end_src
** C++ indentation
Example indentation:
#+begin_example
if(blah)
{
    etc;
}
#+end_example

#+begin_src emacs-lisp
(setq-default c-basic-offset 4)
(setq-default c-default-style "bsd") ; or k&r?
#+end_src
** Quieter visual bell
Message in minibuf on bell, instead of system beep etc
#+begin_src emacs-lisp
(setq ring-bell-function (lambda ()
                           (if (not (active-minibuffer-window))
                               (message "*beep*"))))
#+end_src
** Avoid filesystem mess
*** Move autosave/backup files to ~/.emacs.d/autosaves and ~/.emacs.d/backups

#+begin_src emacs-lisp
(setq backup-directory-alist
      `((".*" . , "~/.emacs.d/backups/")))
(setq auto-save-file-name-transforms
      `((".*" ,"~/.emacs.d/autosaves/" t)))
#+end_src

*** Ensure directory exists
#+begin_src emacs-lisp
(make-directory "~/.emacs.d/backups" t)
(make-directory "~/.emacs.d/autosaves" t)
#+end_src
*** Remove old backups
Remove backups older than one week

#+begin_src emacs-lisp
(message "Deleting old backup files...")
(let ((week (* 60 60 24 7))
      (current (float-time (current-time))))
  (dolist (file (directory-files temporary-file-directory t))
    (when (and (backup-file-name-p file)
               (> (- current (float-time (nth 5 (file-attributes file))))
                  week))
      (message file)
      (delete-file file))))
#+end_src

*** Disable interlocking
Disable .#blah.txt lock files

They are symlinks to fictious files (user@host.pid) which cause
problems with various things, and the locking is of very little
benefit to me

#+begin_src emacs-lisp
(setq create-lockfiles nil)
#+end_src
** Empty default scratch buffer
#+begin_src emacs-lisp
(setq initial-scratch-message "")
#+end_src
** Recent files
*** Enable recentf mode
Also limit to 25 files
#+begin_src emacs-lisp
(require 'recentf)
(setq recentf-max-menu-items 25)
#+end_src

*** Don't clean up recent files
It potentially access network drives, which could trigger tramp,
http://stackoverflow.com/questions/880625

#+begin_src emacs-lisp
(setq recentf-auto-cleanup 'never)
#+end_src

*** Bind to C-x C-r
"C-x r" would be better, but it interfers with "C-x r k" for kill-rectangle
#+begin_src emacs-lisp
(global-set-key "\C-x\ \C-r" 'recentf-open-files)
#+end_src
** Guess mode for new buffer
Guess default mode in new buffers from file extension
http://atomized.org/2010/08/scratch-buffers-for-emacs/

#+begin_src emacs-lisp
(setq default-major-mode
      (lambda ()
        (let ((buffer-file-name (or buffer-file-name (buffer-name))))
          (set-auto-mode))))
#+end_src
** uniqify buffer names
Replace useless blah.txt<2> with blah.txt<thedirectory>
#+begin_src emacs-lisp
(require 'uniquify)
(setq uniquify-buffer-name-style 'post-forward-angle-brackets)
#+end_src
** Access killring menu
#+begin_src emacs-lisp
(global-set-key "\C-cy" '(lambda ()
   (interactive)
   (popup-menu 'yank-menu)))
#+end_src
** Cycle buffers with F1/F2
#+begin_src emacs-lisp
(global-set-key [f1] 'previous-buffer)
(global-set-key [f2] 'next-buffer)
#+end_src
** Fullscreen
Only really works on Linux
#+begin_src emacs-lisp
(defun fullscreen (&optional f)
  (interactive)
  (set-frame-parameter f 'fullscreen
                       (if (frame-parameter f 'fullscreen) nil 'fullboth)))

;(add-hook 'after-make-frame-functions 'fullscreen) ; on startup
(global-set-key [f11] 'fullscreen)
#+end_src
** Scrolling
More sane scrolling with OS X mouse/trackpad

#+begin_src emacs-lisp
(global-set-key [wheel-down] (lambda () (interactive) (scroll-up-command 1)))
(global-set-key [wheel-up] (lambda () (interactive) (scroll-down-command 1)))
(global-set-key [double-wheel-down] (lambda () (interactive) (scroll-up-command 2)))
(global-set-key [double-wheel-up] (lambda () (interactive) (scroll-down-command 2)))
(global-set-key [triple-wheel-down] (lambda () (interactive) (scroll-up-command 4)))
(global-set-key [triple-wheel-up] (lambda () (interactive) (scroll-down-command 4)))
#+end_src
** Cursor
*** Make cursor a vertical bar
Bar makes C-x r t and other box-related behaviour easier to intuit
#+begin_src emacs-lisp
(setq-default cursor-type 'bar)
#+end_src
*** Disable cursor blinking
<blink>For no particular reason</blink>
#+begin_src emacs-lisp
(blink-cursor-mode 0)
#+end_src
*** Cursor in other buffers
Use hollow box in inactive windows, as the disabled bar cursor looks
identical in disabled windows.
#+begin_src emacs-lisp
(setq-default cursor-in-non-selected-windows 'hollow)
#+end_src
** Start server
#+begin_src emacs-lisp
(setq server-use-tcp nil)
(server-start)
#+end_src
** Disable auto-indent
#+begin_src emacs-lisp
(electric-indent-mode 0)
#+end_src
* Packaging setup
melpa repo and workaround for TLS weirdness
#+begin_src emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
;;(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
(package-initialize)

; Weirdness required for Debian? also required 'apt install gnutls-bin'
(setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
#+end_src
* Filesystem navigation
** Use ido for shinier minibuf (C-x b and C-x C-f)
#+begin_src emacs-lisp
(ido-mode 1)
#+end_src

** Ignore files in ido
Ignore .DS_Store and .pyc when finding files

#+begin_src emacs-lisp
(add-to-list 'ido-ignore-files "\\.DS_Store")
(add-to-list 'ido-ignore-files "\\.pyc")
#+end_src


Also OS X "Icon" file: http://stackoverflow.com/q/9053161/745

#+begin_src emacs-lisp
(add-to-list 'ido-ignore-files "Icon\n")
#+end_src
** Prevent ido searching for locations
Disable auto searching for files unless called explicitly, prevents
finding files in random directories automatically

#+begin_src emacs-lisp
(setq ido-auto-merge-delay-time 99999)

(define-key ido-file-dir-completion-map (kbd "C-c C-s")
  (lambda()
    (interactive)
    (ido-initiate-auto-merge (current-buffer))))
#+end_src
* org-mode config
** Enable shift-selection in org
#+begin_src emacs-lisp
(setq org-support-shift-select t)
#+end_src
** auto-mode
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
#+end_src
** babel inline edit
Configure org-mode so that when you edit source code in an indirect
buffer (with C-c '), the buffer is opened in the current window. That
way, your window organization isn't broken when switching.

From http://kieranhealy.org/esk/kjhealy.html

#+begin_src emacs-lisp
(setq org-src-window-setup 'current-window)
#+end_src

** org-capture config
http://blog.gabrielsaldana.org/quick-note-taking-with-emacs-and-org-capture/
*** shortcut
#+begin_src emacs-lisp
(global-set-key "\C-cr" 'org-capture)
#+end_src
*** Capture templates
#+begin_src emacs-lisp
(setq org-capture-templates
      '(("t" "Todo" entry (file+headline (concat org-directory "/todo.org") "Tasks")
         "* TODO %?\n %i\n")
        ("l" "Link" plain (file (concat org-directory "/links.org"))
         "- %?\n %x\n")))
#+end_src
** todo keywords
#+begin_src emacs-lisp
  (setq org-todo-keywords
        '((sequence "TODO(t)" "WAIT(w)" "|" "DONE(d)")))
  
  (setq org-todo-keyword-faces
        '(
          ("TODO" . (:weight bold :foreground "#ff2020" :background "grey10"))
          ("WAIT" . (:weight bold :foreground "grey70" :background "grey10"))
          ("DONE" . (:weight bold :foreground "grey50"))
           ))
#+end_src
* Load path
*** Get base directory
#+begin_src emacs-lisp
(setq dotfiles-dir (file-name-directory (or load-file-name (buffer-file-name))))
#+end_src
*** Load base ext/ directory
Store singular .el files in root of ext/ directory
#+begin_src emacs-lisp
(add-to-list 'load-path (expand-file-name "ext" dotfiles-dir))
#+end_src

*** Subdirs of ext/
#+begin_src emacs-lisp
(dolist
    (d '(
         "emacs-jabber"
         ))
  (add-to-list 'load-path (expand-file-name d (expand-file-name "ext" dotfiles-dir))))
#+end_src

*** Theme load-path
For emacs 24 builtin theming thing
#+begin_src emacs-lisp
(if (boundp 'custom-theme-load-path)
    ;; Only run for emacs >24
    (add-to-list 'custom-theme-load-path (expand-file-name "ext" dotfiles-dir)))
#+end_src
* Environment vars
Executes .bashrc and pulls $PATH, $MANPATH and $PYTHONPATH into emacs
env.

Allows opening Emacs.app normally, while retaining $PATH. Other way is
to open by running "open -a Emacs" in the shell, but this is tidier

https://github.com/purcell/exec-path-from-shell

#+begin_src emacs-lisp
(require 'exec-path-from-shell)
(setq exec-path-from-shell-variables '("PATH" "MANPATH" "PYTHONPATH"))
(when (memq window-system '(mac ns))
  (exec-path-from-shell-initialize))
#+end_src
* Misc modules
** Theme
*** ample
https://github.com/jordonbiondo/ample-theme
#+begin_src emacs-lisp
(load-theme 'ample t t)
(enable-theme 'ample)

; Tweak background
(custom-theme-set-faces
  `ample
  `(default ((t (:background "gray20")))))
#+end_src
** Undo window changes
Undo changes to layout with C-left C-right
#+begin_src emacs-lisp
(winner-mode 1)
#+end_src
** magit
git interface
#+begin_src emacs-lisp
(require 'magit)
#+end_src
** highlight-parentheses
Require module and set nicer colours

http://www.emacswiki.org/emacs/HighlightParentheses

#+begin_src emacs-lisp
(require 'highlight-parentheses)
(setq hl-paren-colors (quote ("firebrick" "lightgreen" "orange" "cyan")))
#+end_src
** cmake-mode
#+begin_src emacs-lisp
(require 'cmake-mode)
(setq auto-mode-alist
      (append '(("CMakeLists\\.txt\\'" . cmake-mode)
                ("\\.cmake\\'" . cmake-mode))
              auto-mode-alist))
#+end_src
** textmate-mode
Require and auto load for .py files

#+begin_src emacs-lisp
(require 'textmate)
(add-hook 'python-mode-hook
'(lambda ()
	(interactive)
	(textmate-mode)))
#+end_src
** Window resizing shortcuts
Super+ctrl+arrows

#+begin_src emacs-lisp
(global-set-key [(super control right)] 'shrink-window-horizontally)
(global-set-key [(super control left)] 'enlarge-window-horizontally)
(global-set-key [(super control up)] 'shrink-window)
(global-set-key [(super control down)] 'enlarge-window)
#+end_src
** Window-jumping shortcuts
*** Super+arrows
#+begin_src emacs-lisp
(require 'windmove)
(windmove-default-keybindings 'super)
#+end_src
*** Non-arrow shortcuts
#+begin_src emacs-lisp
(global-set-key [(super n)]  'windmove-down)
(global-set-key [(super p)]  'windmove-up)
(global-set-key [(super b)]  'windmove-left)
(global-set-key [(super f)]  'windmove-right)
#+end_src
** Super+return makes new line after current
#+begin_src emacs-lisp
(defun make-newline-after-current()
  (interactive)
  (end-of-line)
  (newline-and-indent))

(global-set-key [(super return)] 'make-newline-after-current)
#+end_src
** M-j joins line
Joins next line onto current one, like vim's 'shift+j'

#+begin_src emacs-lisp
(global-set-key (kbd "M-j")
            (lambda ()
                  (interactive)
                  (join-line -1)))
#+end_src
** Undo-tree
#+begin_src emacs-lisp
(require 'undo-tree)
#+end_src
** Rainbow
Useful for editing themes and CSS
http://julien.danjou.info/rainbow-mode.html
#+begin_src emacs-lisp
(require 'rainbow-mode)
#+end_src
** IBuffer
http://martinowen.net/blog/2010/02/tips-for-emacs-ibuffer.html
*** Bind to C-x C-b
#+begin_src emacs-lisp
(global-set-key (kbd "C-x C-b") 'ibuffer)
#+end_src
*** Misc config
Avoid prompts when killing buffers
#+begin_src emacs-lisp
(setq ibuffer-expert t)
#+end_src

Hide empty groups
#+begin_src emacs-lisp
(setq ibuffer-show-empty-filter-groups nil)
#+end_src
*** Configure groups
#+begin_src emacs-lisp
  (setq ibuffer-saved-filter-groups
        (quote (("default"
                 ("org" (or
                         (mode . org-mode)
                         (name . "\\*Org ")
                         ))
                 ("magit" (or
                           (name . "\\*magit:")
                           (mode . magit-mode)
                           ))
                 ("jabber" (or (mode . jabber-roster-mode)
                               (mode . jabber-chat-mode)
                               ))
                 ("Help" (or (mode . help-mode)
                             (name . "\*Help\*")
                             (name . "\*Apropos\*")
                             (name . "\*info\*")
                             ))
                 ("emacs" (or
                           ;(mode . fundamental)
                           (name . "\\*scratch\\*$")
                           (name . "\\*Messages\\*$")
                           (name . "\\*magit-process\\*$")
                           (name . "\\*Compile-Log\\*$")
                           (name . "\\*Backtrace\\*$")
  
                           ;; Magit internal stuff
                           (name . "\\*magit-")
                           ))
                 ))))

  (add-hook 'ibuffer-mode-hook
            (lambda ()
              (ibuffer-switch-to-saved-filter-groups "default")))
#+end_src
*** Fix find-file key override
ido'ify the overridden find-file shortcut, which starts ifo-find-file
in the same directory as the file under the cursor

From http://www.emacswiki.org/emacs/InteractivelyDoThings

#+begin_src emacs-lisp
(require 'ibuffer)
(defun ibuffer-ido-find-file ()
  "Like 'ido-find-file', but default to the directory of the buffer at point."
  (interactive
   (let ((default-directory (let ((buf (ibuffer-current-buffer)))
			      (if (buffer-live-p buf)
				  (with-current-buffer buf
				    default-directory)
				default-directory))))
     (ido-find-file-in-dir default-directory))))

(define-key ibuffer-mode-map "\C-x\C-f" 'ibuffer-ido-find-file)
#+end_src

*** Increase column width
http://unix.stackexchange.com/questions/35830/change-column-width-in-an-emacs-ibuffer-on-the-fly
#+begin_src emacs-lisp
(setq ibuffer-formats
      '((mark modified read-only " "
              (name 30 30 :left :elide) " "
              (size 9 -1 :right) " "
              (mode 16 16 :left :elide) " " filename-and-process)
        (mark " " (name 16 -1) " " filename)))
#+end_src
*** TODO Group by vc-root
ibuffer-vc
https://github.com/purcell/ibuffer-vc
** smex
Weighted ido'ish M-x enhancement
https://github.com/nonsequitur/smex

Setup:
#+begin_src emacs-lisp
(require 'smex)
(smex-initialize)
#+end_src

Key bindings:
#+begin_src emacs-lisp
(global-set-key (kbd "M-x") 'smex)
(global-set-key (kbd "M-X") 'smex-major-mode-commands)
#+end_src

Original M-x bound to C-c C-c M-x:
#+begin_src emacs-lisp
(global-set-key (kbd "C-c M-x") 'execute-extended-command)
#+end_src

** escreen
http://blog.nguyenvq.com/2011/03/07/escreen-instead-of-elscreen-for-screen-like-features-in-emacs/
*** Load
#+begin_src emacs-lisp
(load "escreen")
(escreen-install)
#+end_src
*** Bind prefix to C-z
#+begin_src emacs-lisp
(setq escreen-prefix-char "\C-z")
(global-set-key escreen-prefix-char 'escreen-prefix)
#+end_src
** uniqify buffer names
http://tsengf.blogspot.com/2011/06/distinguish-buffers-of-same-filename-in.html
#+begin_src emacs-lisp
(require 'uniquify)
(setq uniquify-buffer-name-style 'post-forward-angle-brackets)
#+end_src
** Scroll view by lines
#+begin_src emacs-lisp
(global-set-key (kbd "<M-up>") (lambda () (interactive) (scroll-down 1)))
(global-set-key (kbd "<M-down>") (lambda () (interactive) (scroll-up 1)))
#+end_src
** tempbuf
Automatic removal of unused buffers
http://www.emacswiki.org/emacs/TempbufMode
*** Enable mode
#+begin_src emacs-lisp
(require 'tempbuf)
#+end_src
*** Enable for specific modes
#+begin_src emacs-lisp
(add-hook 'buffer-list 'turn-on-tempbuf-mode)
(add-hook 'dired-mode-hook 'turn-on-tempbuf-mode)
(add-hook 'help-mode-hook 'turn-on-tempbuf-mode)
#+end_src
** yaml-mode
https://github.com/yoshiki/yaml-mode

Auto-mode for .yml and .yaml, also .ocio (OpenColorIO config files)
#+begin_src emacs-lisp
(autoload 'yaml-mode "yaml-mode" nil t)
(add-to-list 'auto-mode-alist '("\\.yaml$" . yaml-mode))
(add-to-list 'auto-mode-alist '("\\.yml$" . yaml-mode))
(add-to-list 'auto-mode-alist '("\\.ocio$" . yaml-mode))
#+end_src
** clear shell
Clear inferior-python shell etc
#+begin_src emacs-lisp
(defun clear-shell ()
  (interactive)
  (let ((comint-buffer-maximum-size 0))
    (comint-truncate-buffer)))
#+end_src
** Mark word under cursor
M-@ to highlight word under cusror

#+begin_src emacs-lisp
(defun mark-word-under-cursor ()
  (interactive)
  (backward-word)
  (mark-word))

(global-set-key [(meta @)] 'mark-word-under-cursor)
#+end_src
** Search word under cusror
M-# for vim-ish search word under cursor
#+begin_src emacs-lisp
(defvar isearch-initial-string nil)

(defun isearch-set-initial-string ()
  (remove-hook 'isearch-mode-hook 'isearch-set-initial-string)
  (setq isearch-string isearch-initial-string)
  (isearch-search-and-update))

(defun isearch-forward-at-point (&optional regexp-p no-recursive-edit)
  "Interactive search forward for the symbol at point."
  (interactive "P\np")
  (if regexp-p (isearch-forward regexp-p no-recursive-edit)
    (let* ((end (progn (skip-syntax-forward "w_") (point)))
           (begin (progn (skip-syntax-backward "w_") (point))))
      (if (eq begin end)
          (isearch-forward regexp-p no-recursive-edit)
        (setq isearch-initial-string (buffer-substring begin end))
        (add-hook 'isearch-mode-hook 'isearch-set-initial-string)
        (isearch-forward regexp-p no-recursive-edit)))))

(global-set-key (kbd "M-#") 'isearch-forward-at-point)
#+end_src
** Home between beginning of line or indentation
#+begin_src emacs-lisp
(defun beginning-of-line-or-indentation ()
  "move to beginning of line, or indentation"
  (interactive)
  (if (bolp)
      (back-to-indentation)
    (beginning-of-line)))

(global-set-key [home] 'beginning-of-line-or-indentation)
#+end_src
** end key to end of line
#+begin_src emacs-lisp
(global-set-key [end] 'end-of-line)
#+end_src
** Move lines (disabled)
#+begin_src emacs-lisp
(defun move-text-internal (arg)
  (cond
   ((and mark-active transient-mark-mode)
    (if (> (point) (mark))
        (exchange-point-and-mark))
    (let ((column (current-column))
          (text (delete-and-extract-region (point) (mark))))
      (forward-line arg)
      (move-to-column column t)
      (set-mark (point))
      (insert text)
      (exchange-point-and-mark)
      (setq deactivate-mark nil)))
   (t
    (let ((column (current-column)))
      (beginning-of-line)
      (when (or (> arg 0) (not (bobp)))
        (forward-line)
        (when (or (< arg 0) (not (eobp)))
          (transpose-lines arg))
        (forward-line -1))
      (move-to-column column t)))))

(defun move-text-down (arg)
  "Move region (transient-mark-mode active) or current line
  arg lines down."
  (interactive "*p")
  (move-text-internal arg))

(defun move-text-up (arg)
  "Move region (transient-mark-mode active) or current line
  arg lines up."
  (interactive "*p")
  (move-text-internal (- arg)))

; (global-set-key [M-up] 'move-text-up)
; (global-set-key [M-down] 'move-text-down)
#+end_src
** Show trailing whitespace
F5 toggles showing trailing whitespace

#+begin_src emacs-lisp
(global-set-key (kbd "<f5>")
                (lambda ()
                  (interactive)
                  (setq show-trailing-whitespace (not show-trailing-whitespace))
                  (redraw-display)))
#+end_src
** git-blame
#+begin_src emacs-lisp
(require 'git-blame)
#+end_src
*** Show hash and start of commit message
#+begin_src emacs-lisp
(setq git-blame-prefix-format "%h %.10s:")
#+end_src
** markdown-mode
http://jblevins.org/projects/markdown-mode/
#+begin_src emacs-lisp
(autoload 'markdown-mode "markdown-mode.el"
   "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist '("\\.md$" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.markdown$" . markdown-mode))
#+end_src
** ace-jump-mode
#+begin_src emacs-lisp
(require 'ace-jump-mode)
(define-key global-map (kbd "C-c SPC") 'ace-jump-mode)
#+end_src
** stripe-buffer
Alternating line-colours in dired
https://github.com/sabof/stripe-buffer

#+begin_src emacs-lisp
(autoload 'stripe-buffer-mode "stripe-buffer.el" nil t)
(add-hook 'dired-mode-hook 'stripe-buffer-mode)
#+end_src
** rST mode tweaks
Tweaks for rST mode

Docs for the mode,
http://docutils.sourceforge.net/docs/user/emacs.html


#+begin_src emacs-lisp
(setq rst-preferred-decorations
      '((?= simple 0)
        (?* simple 0)
        (?+ simple 0)
        (?- simple 0)))
#+end_src
** Cursor indicates overwrite etc
Change cursor color according to mode; inspired by
http://www.emacswiki.org/emacs/ChangingCursorDynamically
http://emacs-fu.blogspot.com.au/2009/12/changing-cursor-color-and-shape.html

#+begin_src emacs-lisp
;; valid values are t, nil, box, hollow, bar, (bar . WIDTH), hbar,
;; (hbar. HEIGHT); see the docs for set-cursor-type
(setq djcb-normal-cursor-type    'bar)
(setq djcb-read-only-cursor-type 'hbar)
(setq djcb-overwrite-cursor-type 'box)

(defun djcb-set-cursor-according-to-mode ()
  "change cursor color and type according to some minor modes."

  (cond
    (buffer-read-only
      (setq cursor-type djcb-read-only-cursor-type))
    (overwrite-mode
      (setq cursor-type djcb-overwrite-cursor-type))
    (t
      (setq cursor-type djcb-normal-cursor-type))))

(add-hook 'post-command-hook 'djcb-set-cursor-according-to-mode)
#+end_src
** recursive minibuffer
Ability to call other minibuf-using functions while the minibuf is active

http://www.gnu.org/software/emacs/manual/html_node/elisp/Recursive-Mini.html
http://stackoverflow.com/a/16986889/745

#+begin_src emacs-lisp
(setq enable-recursive-minibuffers t)
(minibuffer-depth-indicate-mode 1)
#+end_src
** god-mode
#+begin_src emacs-lisp
(require 'god-mode)
(global-set-key (kbd "<escape>") 'god-mode-all)
#+end_src
** rust-mode
Restore this
https://github.com/rust-lang/rust-mode
#+begin_src emacs-lisp
(require 'rust-mode)
#+end_src
** Show trailing whitespace
F5 toggles showing trailing whitespace

#+begin_src emacs-lisp
(global-set-key (kbd "<f5>")
                (lambda ()
                  (interactive)
                  (setq show-trailing-whitespace (not show-trailing-whitespace))
                  (redraw-display)))
#+end_src
* Host specific changes
Relative to this file,

- perhost/current-host.el - useful for customisations specific to
  machines on a network with a shared home-dir. Not commited.
- perhost/${HOST}.el - hostname-specific customisations. Could be
  commited.
- perhost/{linux,windows,darwin,etc}.el - OS specific config

#+begin_src emacs-lisp
  (defun dotemacs-joindirs (root &rest dirs)
    "Joins a series of directories together, like Python's os.path.join,
    (dotemacs-joindirs \"/tmp\" \"a\" \"b\" \"c\") => /tmp/a/b/c"

    (if (not dirs)
        root ; No more dirs to join, no more recursing
      (apply 'dotemacs-joindirs
             (expand-file-name (car dirs) root)
             (cdr dirs))))


  (defun dotemacs-current-platform ()
    (let ((cur-plat-name (symbol-name system-type)) ; Current platform
          (platform-remap '( ; A map from akward-filesystem-names to simpler ones
                            ("gnu/linux" . "linux")
                            ("windows-nt" . "windows")
                            ("darwin" . "darwin")
                            )))
      (cdr (assoc cur-plat-name platform-remap))))


  (let ((local-conf-name    (dotemacs-joindirs dotfiles-dir "perhost" "current-host.el"))
        (perhost-conf-name  (dotemacs-joindirs dotfiles-dir (format "%s.el" (first (split-string system-name "\\.")))))
        (platform-conf-name (dotemacs-joindirs dotfiles-dir (format "%s.el" (dotemacs-current-platform))))
        )

    (cond ((file-exists-p local-conf-name)
           (load-file local-conf-name))
          ((message "Local %s doesn't exist" local-conf-name)))
    (cond ((file-exists-p perhost-conf-name)
           (load-file perhost-conf-name))
          ((message "Platform-specific config %s doesn't exist" platform-conf-name))))

#+end_src
* Notes
** rgb to hex function
Might be useful for modifying theme at some point

#+BEGIN_EXAMPLE
(defun rgb (r &optional g b)
  "Converts three RGB values to HTMLish hex string.

  If supplied a single value, it is treated as a greyscale value (e.g
  (rgb 255) is identical to (rgb 255 255 255)

  ELISP> (rgb 0 128 255)
  \"#0080FF\"
  ELISP> (rgb 255)
  \"#FFFFFF\"
  "
  (if (and g b)
      (format "#%02X%02X%02X" r g b)
    (format "#%02X%02X%02X" r r r)))
#+END_EXAMPLE
** Jump to directory bash alias
Jumps to directory of current file (for reference, not evaluated)
http://www.reddit.com/r/emacs/comments/hd3jm/from_my_bashrc_jump_to_emacss_current_directory/
#+begin_example
alias jm='cd $(emacsclient -e "(with-current-buffer (window-buffer (frame-selected-window)) default-directory)" | '"sed -E 's/(^\")|(\"$)//g')"
#+end_example
